// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	batchapi "github.com/trustbloc/sidetree-core-go/pkg/api/batch"
	"github.com/trustbloc/sidetree-core-go/pkg/api/protocol"
)

type OperationApplier struct {
	ApplyStub        func(op *batchapi.AnchoredOperation, rm *protocol.ResolutionModel) (*protocol.ResolutionModel, error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		op *batchapi.AnchoredOperation
		rm *protocol.ResolutionModel
	}
	applyReturns struct {
		result1 *protocol.ResolutionModel
		result2 error
	}
	applyReturnsOnCall map[int]struct {
		result1 *protocol.ResolutionModel
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OperationApplier) Apply(op *batchapi.AnchoredOperation, rm *protocol.ResolutionModel) (*protocol.ResolutionModel, error) {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		op *batchapi.AnchoredOperation
		rm *protocol.ResolutionModel
	}{op, rm})
	fake.recordInvocation("Apply", []interface{}{op, rm})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(op, rm)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.applyReturns.result1, fake.applyReturns.result2
}

func (fake *OperationApplier) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *OperationApplier) ApplyArgsForCall(i int) (*batchapi.AnchoredOperation, *protocol.ResolutionModel) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].op, fake.applyArgsForCall[i].rm
}

func (fake *OperationApplier) ApplyReturns(result1 *protocol.ResolutionModel, result2 error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 *protocol.ResolutionModel
		result2 error
	}{result1, result2}
}

func (fake *OperationApplier) ApplyReturnsOnCall(i int, result1 *protocol.ResolutionModel, result2 error) {
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 *protocol.ResolutionModel
			result2 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 *protocol.ResolutionModel
		result2 error
	}{result1, result2}
}

func (fake *OperationApplier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OperationApplier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ protocol.OperationApplier = new(OperationApplier)
